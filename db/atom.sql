CREATE TABLE IF NOT EXISTS `AtomDB`.`license_verification_table`(
  `LICENSE_ID` INT AUTO_INCREMENT NOT NULL,
  `LICENSE_VERIFICATION_KEY` VARCHAR(2500) NULL,
  `COMPANY_NAME` VARCHAR(500) NOT NULL,
  `START_DATE` DATETIME NULL,
  `END_DATE` DATETIME NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`LICENSE_ID`)
);


CREATE TABLE IF NOT EXISTS `AtomDB`.`end_user_table`(
  `END_USER_ID` INT AUTO_INCREMENT NOT NULL,
  `COMPANY_NAME` VARCHAR(500) NOT NULL UNIQUE,
  `PO_BOX` VARCHAR(50) NULL,
  `ADDRESS` VARCHAR(2500) NULL,
  `STREET_NAME` VARCHAR(500) NULL,
  `CITY` VARCHAR(500) NULL,
  `COUNTRY` VARCHAR(500) NULL,
  `CONTACT_PERSON` VARCHAR(500) NULL,
  `CONTACT_NUMBER` VARCHAR(500) NULL,
  `EMAIL` VARCHAR(500) NULL,
  `DOMAIN_NAME` VARCHAR(500) NULL,
  `INDUSTRY_TYPE` VARCHAR(500) NULL,
  `LICENSE_ID` INT,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`END_USER_ID`),
  FOREIGN KEY (`LICENSE_ID`) REFERENCES license_verification_table(`LICENSE_ID`)
);




CREATE TABLE IF NOT EXISTS `AtomDB`.`user_roles`(
  `ROLE_ID` INT AUTO_INCREMENT NOT NULL,
  `ROLE` VARCHAR(50) NOT NULL,
  `CONFIGURATION` VARCHAR(5000) NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`ROLE_ID`)
);



CREATE TABLE IF NOT EXISTS `AtomDB`.`user_table` (
  `ID` INT AUTO_INCREMENT NOT NULL,
  `USER_ID` VARCHAR(50) NOT NULL UNIQUE,
  `EMAIL` VARCHAR(50) NULL,
  `NAME` VARCHAR(200) NOT NULL,
  `ROLE_ID` INT NOT NULL,
  `STATUS` VARCHAR(200) NOT NULL,
  `ACCOUNT_TYPE` VARCHAR(15) NULL,
  `PASSWORD` VARCHAR(512) NOT NULL,
  `LAST_LOGIN` DATETIME NULL,
  `TEAM` VARCHAR(50) NULL,
  `END_USER_ID` INT NOT NULL,
  `SUPER_USER` VARCHAR(15) NOT NULL DEFAULT 'False',

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`ID`),
  FOREIGN KEY (`ROLE_ID`) REFERENCES user_roles(`ROLE_ID`),
  FOREIGN KEY (`END_USER_ID`) REFERENCES end_user_table(`END_USER_ID`)
);



CREATE TABLE IF NOT EXISTS `AtomDB`.`module_activity_table`(
  `ID` INT AUTO_INCREMENT NOT NULL,
  `USER_ID` VARCHAR(50) NOT NULL,
  `MODULE_FROM` VARCHAR(50) NOT NULL,
  `MODULE_TO` VARCHAR(50) NOT NULL,
  `OBJECT_ID` VARCHAR(50) NOT NULL,
  `OPERATION` VARCHAR(50) NOT NULL,
  `STATUS` VARCHAR(50) NOT NULL,
  `DESCRIPTION` VARCHAR(200) NOT NULL,
  `TIMESTAMP` DATETIME,

  PRIMARY KEY (`ID`)
);



CREATE TABLE IF NOT EXISTS `AtomDB`.`login_activity_table`(
  `ID` INT AUTO_INCREMENT NOT NULL,
  `USER_ID` VARCHAR(50) NOT NULL,
  `OPERATION` VARCHAR(50) NOT NULL,
  `STATUS` VARCHAR(50) NOT NULL,
  `DESCRIPTION` VARCHAR(200) NOT NULL,
  `TIMESTAMP` DATETIME,

  PRIMARY KEY (`ID`)
);



CREATE TABLE IF NOT EXISTS `AtomDB`.`password_group_table`(
  `PASSWORD_GROUP` VARCHAR(50) NOT NULL,
  `USERNAME` VARCHAR(50) NULL,
  `PASSWORD` VARCHAR(50) NULL,
  `SECRET_PASSWORD` VARCHAR(50) NULL,
  `PASSWORD_GROUP_TYPE` VARCHAR(50) NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`PASSWORD_GROUP`)
);


CREATE TABLE IF NOT EXISTS `AtomDB`.`site_table` (
  `SITE_ID` INT AUTO_INCREMENT NOT NULL,
  `SITE_NAME` VARCHAR(50) NOT NULL UNIQUE,
  `REGION_NAME` VARCHAR(50) NULL,
  `LATITUDE` VARCHAR(70) NULL,
  `LONGITUDE` VARCHAR(70) NULL,
  `CITY` VARCHAR(50) NULL,
  `STATUS` VARCHAR(50) NULL,
  `TOTAL_COUNT` INT NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`SITE_ID`)
);



CREATE TABLE IF NOT EXISTS `AtomDB`.`rack_table` (
  `RACK_ID` INT AUTO_INCREMENT NOT NULL,
  `RACK_NAME` VARCHAR(50) NOT NULL UNIQUE,
  `SITE_ID` INT NOT NULL,
  `SERIAL_NUMBER` VARCHAR(50) NULL,
  `MANUFACTURER_DATE` DATE NULL,
  `UNIT_POSITION` VARCHAR(20) NULL,
  `STATUS` VARCHAR(50) NULL,
  `RU` INT NULL,
  `RFS_DATE` DATE NULL,
  `HEIGHT` INT NULL,
  `WIDTH` INT NULL,
  `DEPTH` INT NULL,
  `PN_CODE` VARCHAR(50) NULL,
  `RACK_MODEL` VARCHAR(50) NULL,
  `FLOOR` VARCHAR(50) NULL,
  `TOTAL_COUNT` INT NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  FOREIGN KEY (`SITE_ID`) REFERENCES site_table(`SITE_ID`),
  PRIMARY KEY (`RACK_ID`)
);



CREATE TABLE IF NOT EXISTS `AtomDB`.`atom_table` (
  `ATOM_ID` INT AUTO_INCREMENT NOT NULL,
  `RACK_ID` INT NOT NULL,
  `DEVICE_NAME` VARCHAR(50) NOT NULL UNIQUE,
  `IP_ADDRESS` VARCHAR(50) NOT NULL UNIQUE,
  `DEVICE_RU` VARCHAR(50) NULL,
  `DEPARTMENT` VARCHAR(50) NULL,
  `SECTION` VARCHAR(50) NULL,
  `CRITICALITY` VARCHAR(50) NULL,
  `FUNCTION` VARCHAR(50) NULL,
  `DOMAIN` VARCHAR(50) NULL,
  `VIRTUAL` VARCHAR(50) NULL,
  `DEVICE_TYPE` VARCHAR(50) NULL,
  `PASSWORD_GROUP` VARCHAR(50) NULL,
  `ONBOARD_STATUS` VARCHAR(50) NULL,
  `SCOP` VARCHAR(50) DEFAULT 'Atom',

  `VENDOR` VARCHAR(50) NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`ATOM_ID`),
  FOREIGN KEY (`PASSWORD_GROUP`) REFERENCES password_group_table(`PASSWORD_GROUP`),
  FOREIGN KEY (`RACK_ID`) REFERENCES rack_table(`RACK_ID`)
);


CREATE TABLE IF NOT EXISTS `AtomDB`.`atom_transition_table` (
  `ATOM_TRANSITION_ID` INT AUTO_INCREMENT NOT NULL,
  `SITE_NAME` VARCHAR(50) NULL,
  `RACK_NAME` VARCHAR(50) NULL,
  `DEVICE_NAME` VARCHAR(50) NULL,
  `IP_ADDRESS` VARCHAR(50) NOT NULL UNIQUE,
  `VENDOR` VARCHAR(50) NULL,
  `DEVICE_RU` VARCHAR(50) NULL,
  `DEPARTMENT` VARCHAR(50) NULL,
  `SECTION` VARCHAR(50) NULL,
  `CRITICALITY` VARCHAR(50) NULL,
  `FUNCTION` VARCHAR(50) NULL,
  `DOMAIN` VARCHAR(50) NULL,
  `VIRTUAL` VARCHAR(50) NULL,
  `DEVICE_TYPE` VARCHAR(50) NULL,
  `PASSWORD_GROUP` VARCHAR(50) NULL,
  `ONBOARD_STATUS` VARCHAR(50) NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`ATOM_TRANSITION_ID`)
);


CREATE TABLE IF NOT EXISTS `AtomDB`.`uam_device_table` (
  `UAM_ID` INT AUTO_INCREMENT NOT NULL,
  `ATOM_ID` INT NOT NULL,
  
  `SOFTWARE_TYPE` VARCHAR(50) NULL,
  `SOFTWARE_VERSION` VARCHAR(50) NULL,
  `PATCH_VERSION` VARCHAR(50) NULL,
  `STATUS` VARCHAR(50) NULL,
  `MANUFACTURER` VARCHAR(50) NULL,
  `HW_EOS_DATE` DATE NULL,
  `HW_EOL_DATE` DATE NULL,
  `SW_EOS_DATE` DATE NULL,
  `SW_EOL_DATE` DATE NULL,
  `RFS_DATE` DATE NULL,
  `AUTHENTICATION` VARCHAR(10) NULL,
  `SERIAL_NUMBER` VARCHAR(50) NULL,
  `PN_CODE` VARCHAR(50) NULL,
  `SUBRACK_ID_NUMBER` VARCHAR(50) NULL,
  `MANUFACTURER_DATE` DATE NULL,
  `HARDWARE_VERSION` VARCHAR(50) NULL,
  `MAX_POWER` VARCHAR(50) NULL,
  `SITE_TYPE` VARCHAR(50) NULL,
  `SOURCE` VARCHAR(50) NULL,
  `STACK` VARCHAR(50) NULL,
  `CONTRACT_NUMBER` VARCHAR(50) NULL,
  `CONTRACT_EXPIRY` DATE NULL,
  `UPTIME` DATE NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`UAM_ID`),
  FOREIGN KEY (`ATOM_ID`) REFERENCES atom_table (`ATOM_ID`)
);


CREATE TABLE IF NOT EXISTS `AtomDB`.`board_table` (
  `BOARD_ID` INT AUTO_INCREMENT NOT NULL,
  `UAM_ID` INT NOT NULL,
  
  `BOARD_NAME` VARCHAR(250) NOT NULL,
  `DEVICE_SLOT_ID` VARCHAR(250) NULL,
  `SOFTWARE_VERSION` VARCHAR(50) NULL,
  `HARDWARE_VERSION` VARCHAR(50) NULL,
  `SERIAL_NUMBER` VARCHAR(50) NULL,
  `MANUFACTURER_DATE` DATE NULL,
  `STATUS` VARCHAR(50) NULL,
  `EOS_DATE` DATE NULL,
  `EOL_DATE` DATE NULL,
  `RFS_DATE` DATE NULL,
  `PN_CODE` VARCHAR(50) NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`BOARD_ID`),
  FOREIGN KEY (`UAM_ID`) REFERENCES uam_device_table (`UAM_ID`) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS `AtomDB`.`subboard_table` (
  `SUBBOARD_ID` INT AUTO_INCREMENT NOT NULL,
  `UAM_ID` INT NOT NULL,
  
  `SUBBOARD_NAME` VARCHAR(250) NOT NULL,
  `SUBBOARD_TYPE` VARCHAR(150) NULL,
  `SUBRACK_ID` VARCHAR(250) NULL,
  `SLOT_NUMBER` VARCHAR(250) NULL,
  `SUBSLOT_NUMBER` VARCHAR(250) NULL,
  `SOFTWARE_VERSION` VARCHAR(50) NULL,
  `HARDWARE_VERSION` VARCHAR(50) NULL,
  `SERIAL_NUMBER` VARCHAR(50) NULL,
  `STATUS` VARCHAR(50) NULL,
  `EOS_DATE` DATE NULL,
  `EOL_DATE` DATE NULL,
  `RFS_DATE` DATE NULL,
  `PN_CODE` VARCHAR(50) NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`SUBBOARD_ID`),
  FOREIGN KEY (`UAM_ID`) REFERENCES uam_device_table (`UAM_ID`) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS `AtomDB`.`sfp_table` (
  `SFP_ID` INT AUTO_INCREMENT NOT NULL,
  `UAM_ID` INT NOT NULL,
  
  `MEDIA_TYPE` VARCHAR(50) NULL,
  `PORT_NAME` VARCHAR(250) NULL,
  `PORT_TYPE` VARCHAR(50) NULL,
  `CONNECTOR` VARCHAR(50) NULL,
  `MODE` VARCHAR(50) NULL,
  `SPEED` VARCHAR(50) NULL,
  `WAVELENGTH` VARCHAR(50) NULL,
  `MANUFACTURER` VARCHAR(250) NULL,
  `OPTICAL_DIRECTION_TYPE` VARCHAR(50) NULL,
  `PN_CODE` VARCHAR(50) NULL,
  `STATUS` VARCHAR(50) NULL,
  `EOS_DATE` DATE NULL,
  `EOL_DATE` DATE NULL,
  `RFS_DATE` DATE NULL,
  `SERIAL_NUMBER` VARCHAR(50) NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`SFP_ID`),
  FOREIGN KEY (`UAM_ID`) REFERENCES uam_device_table (`UAM_ID`) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS `AtomDB`.`license_table` (
  `LICENSE_ID` INT AUTO_INCREMENT NOT NULL,
  `UAM_ID` INT NOT NULL,

  `LICENSE_NAME` VARCHAR(250) NOT NULL UNIQUE,
  `LICENSE_DESCRIPTION` VARCHAR(250) NULL,
  `RFS_DATE` DATE NULL,
  `ACTIVATION_DATE` DATE NULL,
  `EXPIRY_DATE` DATE NULL,
  `GRACE_PERIOD` VARCHAR(10) NULL,
  `SERIAL_NUMBER` VARCHAR(50) NULL,
  `STATUS` VARCHAR(50) NULL,
  `CAPACITY` VARCHAR(50) NULL,
  `USAGE` VARCHAR(50) NULL,
  `PN_CODE` VARCHAR(50) NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`LICENSE_ID`),
  FOREIGN KEY (`UAM_ID`) REFERENCES uam_device_table (`UAM_ID`) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS `AtomDB`.`sntc_table` (
  `SNTC_ID` INT AUTO_INCREMENT NOT NULL,
  `PN_CODE` VARCHAR(50) NULL,
  `HW_EOS_DATE` DATE NULL,
  `HW_EOL_DATE` DATE NULL,
  `SW_EOS_DATE` DATE NULL,
  `SW_EOL_DATE` DATE NULL,
  `RFS_DATE` DATE NULL,
  `MANUFACTURER_DATE` DATE NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`SNTC_ID`)
);


CREATE TABLE IF NOT EXISTS `AtomDB`.`aps_table`(
  `AP_ID` INT AUTO_INCREMENT NOT NULL UNIQUE,
  `UAM_ID` INT NOT NULL,

  `CONTROLLER_NAME` VARCHAR(50) NOT NULL,
  `AP_IP` VARCHAR(50) NOT NULL,
  `AP_NAME` VARCHAR(50) NULL,
  `SERIAL_NUMBER` VARCHAR(50) NULL,
  `AP_MODEL` VARCHAR(50) NULL,
  `HARDWARE_VERSION` VARCHAR(50) NULL,
  `SOFTWARE_VERSION` VARCHAR(50) NULL,
  `DESCRIPTION` VARCHAR(200) NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`AP_ID`),
  FOREIGN KEY (`UAM_ID`) REFERENCES uam_device_table (`UAM_ID`) ON DELETE CASCADE
);



CREATE TABLE IF NOT EXISTS `AtomDB`.`monitoring_credentials_table`(
  `MONITORING_CREDENTIALS_ID` INT AUTO_INCREMENT NOT NULL,
  `CATEGORY` VARCHAR(100) NULL,
  `CREDENTIALS` VARCHAR(100) NULL,
  `IP_ADDRESS` VARCHAR(50) NULL,
  `PROFILE_NAME` VARCHAR(250) NOT NULL UNIQUE,
  `DESCRIPTION` VARCHAR(250) NULL,
  `SNMP_READ_COMMUNITY` VARCHAR(50) NULL,
  `SNMP_PORT` VARCHAR(50) NULL,
  `USERNAME` VARCHAR(100) NULL,
  `PASSWORD` VARCHAR(100) NULL,
  `ENCRYPTION_PASSWORD` VARCHAR(100) NULL,
  `AUTHENTICATION_METHOD` VARCHAR(50) NULL,
  `ENCRYPTION_METHOD` VARCHAR(50) NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`MONITORING_CREDENTIALS_ID`)
);


CREATE TABLE IF NOT EXISTS `AtomDB`.`monitoring_devices_table` (
  `MONITORING_DEVICE_ID` INT AUTO_INCREMENT NOT NULL UNIQUE,
  `ATOM_ID` INT NOT NULL,
  `MONITORING_CREDENTIALS_ID` INT NULL,
  
  `SOURCE` VARCHAR(50) NULL,
  `ACTIVE` VARCHAR(50) NULL,
  `PING_STATUS` VARCHAR(40) NULL,
  `SNMP_STATUS` VARCHAR(40) NULL,
  `ACTIVE_ID` VARCHAR(80) NULL,
  `DEVICE_HEATMAP` VARCHAR(40) NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`MONITORING_DEVICE_ID`),
  FOREIGN KEY (`ATOM_ID`) REFERENCES atom_table (`ATOM_ID`),
  FOREIGN KEY (`MONITORING_CREDENTIALS_ID`) REFERENCES monitoring_credentials_table (`MONITORING_CREDENTIALS_ID`)
);


CREATE TABLE IF NOT EXISTS `AtomDB`.`monitoring_alerts_table`(
  `MONITORING_ALERT_ID` INT AUTO_INCREMENT NOT NULL UNIQUE,
  `MONITORING_DEVICE_ID` INT NOT NULL,
  
  `DESCRIPTION` VARCHAR(200) NULL,
  `ALERT_TYPE` VARCHAR(50) NULL,
  `CATEGORY` VARCHAR(50) NULL,
  `ALERT_STATUS` VARCHAR(50) NULL,
  `MAIL_STATUS` VARCHAR(50) NULL,
  `START_DATE` DATETIME NULL,
  `FUNCTION` VARCHAR(50) NULL,
  
  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  
  PRIMARY KEY (`MONITORING_ALERT_ID`),
  FOREIGN KEY (`MONITORING_DEVICE_ID`) REFERENCES monitoring_devices_table (`MONITORING_DEVICE_ID`)
);


CREATE TABLE IF NOT EXISTS `AtomDB`.`auto_discovery_table`(
  `DISCOVERY_ID` INT AUTO_INCREMENT NOT NULL,
  `IP_ADDRESS` VARCHAR(50) NOT NULL,
  `SUBNET` VARCHAR(50) NULL,
  `OS_TYPE` VARCHAR(500) NOT NULL,
  `MAKE_MODEL` VARCHAR(500) NOT NULL,
  `FUNCTION` VARCHAR(500) NOT NULL,
  `VENDOR` VARCHAR(500) NOT NULL,
  `SNMP_STATUS` VARCHAR(50) NOT NULL,
  `SNMP_VERSION` VARCHAR(50) NOT NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY(`DISCOVERY_ID`)
);

CREATE TABLE IF NOT EXISTS `AtomDB`.`auto_discovery_network_table`(
  `NETWORK_ID` INT AUTO_INCREMENT NOT NULL,
  `NETWORK_NAME` VARCHAR(50) NOT NULL UNIQUE,
  `SUBNET` VARCHAR(50) NOT NULL UNIQUE,
  `NO_OF_DEVICES` INT NULL,
  `SCAN_STATUS` VARCHAR(50) NULL,
  `EXCLUDED_IP_RANGE` VARCHAR(200) NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  
  PRIMARY KEY(`NETWORK_ID`)
);


CREATE TABLE IF NOT EXISTS `AtomDB`.`ncm_device_table`(
  `NCM_DEVICE_ID` INT AUTO_INCREMENT NOT NULL,
  `ATOM_ID` INT NOT NULL,
  `STATUS` VARCHAR(50) NULL,
  `CONFIG_CHANGE_DATE` DATETIME NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,


  PRIMARY KEY (`NCM_DEVICE_ID`),
  FOREIGN KEY (`ATOM_ID`) REFERENCES atom_table (`ATOM_ID`)
);

CREATE TABLE IF NOT EXISTS `AtomDB`.`ncm_history_table`(
  `NCM_HISTORY_ID` INT AUTO_INCREMENT NOT NULL,
  `NCM_DEVICE_ID` INT NOT NULL,
  `FILE_NAME` VARCHAR(50) NULL,
  `CONFIGURATION_DATE` DATETIME NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`NCM_HISTORY_ID`),
  FOREIGN KEY (`NCM_DEVICE_ID`) REFERENCES ncm_device_table (`NCM_DEVICE_ID`)
);

CREATE TABLE IF NOT EXISTS `AtomDB`.`ncm_configuration_status_table`(
  `NCM_STATUS_ID` INT AUTO_INCREMENT NOT NULL,
  `NCM_DEVICE_ID` INT NOT NULL,
  `SUCCESS` INT NOT NULL,
  `FAILURE` INT NOT NULL,

  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`NCM_STATUS_ID`),
  FOREIGN KEY (`NCM_DEVICE_ID`) REFERENCES ncm_device_table (`NCM_DEVICE_ID`)
);



CREATE TABLE IF NOT EXISTS `AtomDB`.`ncm_alarm_table`(
  `NCM_ALARM_ID` INT AUTO_INCREMENT NOT NULL,
  `NCM_DEVICE_ID` INT NOT NULL,
  `ALARM_CATEGORY` VARCHAR(50) NULL,
  `ALARM_TITLE` VARCHAR(200) NULL,
  `ALARM_DESCRIPTION` VARCHAR(500) NULL,
  `ALARM_STATUS` VARCHAR(50) DEFAULT 'Open',
  `RESOLVE_REMARKS` VARCHAR(200) NULL,
  `ALARM_MAIL_STATUS` VARCHAR(50) DEFAULT 'No',
  `ALARM_MAIL_DATE` DATETIME NULL,
  `RESOLVE_MAIL_STATUS` VARCHAR(50) DEFAULT 'No',
  `RESOLVE_MAIL_DATE` DATETIME NULL,
  
  `CREATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `MODIFICATION_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  PRIMARY KEY (`NCM_ALARM_ID`),
  FOREIGN KEY (`NCM_DEVICE_ID`) REFERENCES ncm_device_table (`NCM_DEVICE_ID`)
);